/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/interview/[interview_Id]/start/page",{

/***/ "(app-pages-browser)/./app/interview/[interview_Id]/start/page.jsx":
/*!*****************************************************!*\
  !*** ./app/interview/[interview_Id]/start/page.jsx ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// \"use client\";\n// import React, { useContext, useState, useEffect, useRef } from \"react\";\n// import { InterviewDataContext } from \"@/context/InterviewDataContext\";\n// import { Timer, Mic, Phone } from \"lucide-react\";\n// import Image from \"next/image\";\n// import Vapi from \"@vapi-ai/web\";\n// import { useRouter } from \"next/navigation\";\n// import axios from \"axios\";\n// import { supabase } from \"@/services/supabaseClient\";\n// import { useParams } from \"next/navigation\";\n// import Footer from \"@/app/(main)/footer/page\";\n// function StartInterview() {\n//   const { interviewInfo, setInterviewInfo } = useContext(\n//     InterviewDataContext\n//   ) || {\n//     interviewInfo: {\n//       userName: \"Guest\",\n//       interviewData: {\n//         questionList: [\n//           { question: \"What is your experience?\" },\n//           { question: \"Why do you want this job?\" },\n//         ],\n//       },\n//     },\n//     setInterviewInfo: () => {},\n//   };\n//   const vapiRef = useRef(null);\n//   const [isCallActive, setIsCallActive] = useState(false);\n//   const [time, setTime] = useState(0);\n//   const [isMuted, setIsMuted] = useState(false);\n//   const timerIntervalRef = useRef(null);\n//   const router = useRouter();\n//   const [isAiSpeaking, setIsAiSpeaking] = useState(false);\n//   const [isUserSpeaking, setIsUserSpeaking] = useState(false);\n//   const aiSpeechTimeoutRef = useRef(null);\n//   const userSpeechTimeoutRef = useRef(null);\n//   const conversationRef = useRef([]);\n//   const { interview_Id } = useParams();\n//   // Initialize Vapi only on client side\n//   useEffect(() => {\n//     if (typeof window === \"undefined\") return;\n//     console.log(\"Initializing Vapi...\");\n//     try {\n//       vapiRef.current = new Vapi(process.env.NEXT_PUBLIC_VAPI_PUBLIC_API_KEY)\n//       console.log(\"Vapi initialized successfully:\", vapiRef.current);\n//     } catch (error) {\n//       console.error(\"Failed to initialize Vapi:\", error.message);\n//       return;\n//     }\n//     vapiRef.current.on(\"call-start\", () => {\n//       console.log(\"Call started event triggered\");\n//       setIsCallActive(true);\n//       startTimer();\n//       conversationRef.current = []; \n//     });\n//     vapiRef.current.on(\"call-end\", async () => {\n//       console.log(\"Call ended event triggered\");\n//       setIsCallActive(false);\n//       stopTimer();\n//       setInterviewInfo((prev) => ({\n//         ...prev,\n//         isInterviewActive: false,\n//       }));\n//       setIsAiSpeaking(false);\n//       setIsUserSpeaking(false);\n//       cleanupMedia();\n//       console.log(\"Full conversation:\", conversationRef.current);\n//       await GenerateFeedback(conversationRef.current);\n//     });\n//     vapiRef.current.on(\"message\", (message) => {\n//       console.log(\"Message received:\", message);\n//       if (message.type === \"transcript\") {\n//         const entry = { role: message.role, transcript: message.transcript };\n//         conversationRef.current.push(entry);\n//         console.log(`${message.role || \"unknown\"}: ${message.transcript}`);\n//         if (message.role === \"assistant\") {\n//           setIsAiSpeaking(true);\n//           if (aiSpeechTimeoutRef.current)\n//             clearTimeout(aiSpeechTimeoutRef.current);\n//           aiSpeechTimeoutRef.current = setTimeout(() => {\n//             setIsAiSpeaking(false);\n//           }, 2000);\n//         } else {\n//           setIsUserSpeaking(true);\n//           if (userSpeechTimeoutRef.current)\n//             clearTimeout(userSpeechTimeoutRef.current);\n//           userSpeechTimeoutRef.current = setTimeout(() => {\n//             setIsUserSpeaking(false);\n//           }, 2000);\n//         }\n//       }\n//     });\n//     vapiRef.current.on(\"error\", (error) => {\n//       console.error(\"Vapi error event:\", JSON.stringify(error, null, 2));\n//       if (error.code === \"start-method-error\") {\n//         console.error(\n//           \"Start method failed. Possible causes: invalid assistant ID, API key, or serverMessage configuration.\"\n//         );\n//         if (error.message) console.error(\"Error message:\", error.message);\n//       }\n//     });\n//   }, [setInterviewInfo]);\n//   useEffect(() => {\n//     if (typeof window === \"undefined\" || !vapiRef.current) return;\n//     console.log(\"Checking interviewInfo in useEffect:\", interviewInfo);\n//     if (interviewInfo && !isCallActive) {\n//       console.log(\"Starting call with interviewInfo:\", interviewInfo);\n//       startCall();\n//     } else if (!interviewInfo) {\n//       console.warn(\"interviewInfo is undefined, using fallback\");\n//       startCall();\n//     }\n//   }, [interviewInfo, isCallActive]);\n//   const startTimer = () => {\n//     if (timerIntervalRef.current) return;\n//     timerIntervalRef.current = setInterval(() => {\n//       setTime((prev) => prev + 1);\n//     }, 1000);\n//   };\n//   const stopTimer = () => {\n//     if (timerIntervalRef.current) {\n//       clearInterval(timerIntervalRef.current);\n//       timerIntervalRef.current = null;\n//     }\n//   };\n//   const formatTime = (seconds) => {\n//     const h = Math.floor(seconds / 3600);\n//     const m = Math.floor((seconds % 3600) / 60);\n//     const s = seconds % 60;\n//     return `${h.toString().padStart(2, \"0\")}:${m\n//       .toString()\n//       .padStart(2, \"0\")}:${s.toString().padStart(2, \"0\")}`;\n//   };\n//   const GenerateFeedback = async (conversation) => {\n//     if (!conversation || conversation.length === 0) {\n//       console.log(\"No conversation data available for feedback.\");\n//       router.replace(\"/interview/completed\");\n//       return;\n//     }\n//     let FINAL_CONTENT = \"\";\n//     try {\n//       const result = await axios.post(\"/api/ai-feedback\", { conversation });\n//       console.log(\"Feedback generated:\", result?.data);\n//       const content = result?.data?.content;\n//       FINAL_CONTENT = content\n//         .replace(/^```json/, \"\")\n//         .replace(/```$/, \"\")\n//         .trim();\n//       console.log(\"Cleaned Feedback Content:\", FINAL_CONTENT);\n//       setInterviewInfo((prev) => ({\n//         ...prev,\n//         feedback: FINAL_CONTENT,\n//       }));\n//       let feedbackData = FINAL_CONTENT;\n//       try {\n//         feedbackData = JSON.parse(FINAL_CONTENT);\n//       } catch (parseError) {\n//         console.warn(\"Feedback is not valid JSON, inserting as string:\", parseError);\n//         feedbackData = FINAL_CONTENT;\n//       }\n//       const { data, error } = await supabase\n//         .from(\"interview-feedback\")\n//         .insert([\n//           {\n//             userName: interviewInfo?.userName,\n//             userEmail: interviewInfo?.userEmail,\n//             interview_Id: interview_Id,\n//             feedback: feedbackData,\n//             recommended: false,\n//           },\n//         ])\n//         .select();\n//       console.log(\"Inserted data:\", data);\n//       if (error) {\n//         console.error(\"Supabase insert error:\", error);\n//       }\n//     } catch (error) {\n//       console.error(\"Error generating feedback:\", error);\n//       FINAL_CONTENT = \"\"; // Ensure it's defined even on error\n//     } finally {\n//       router.replace(\"/interview/\" + interview_Id + \"/completed\");\n//     }\n//   };\n//   const startCall = () => {\n//     if (typeof window === \"undefined\" || !vapiRef.current) {\n//       console.error(\"Vapi instance is not initialized or not on client\");\n//       return;\n//     }\n//     let questionList = \"\";\n//     if (\n//       interviewInfo?.interviewData?.questionList &&\n//       Array.isArray(interviewInfo?.interviewData?.questionList)\n//     ) {\n//       questionList = interviewInfo?.interviewData?.questionList\n//         .filter((item) => item?.question)\n//         .map((item) => item.question)\n//         .join(\", \");\n//     } else {\n//       console.warn(\"No valid interviewData.questionList found, using fallback\");\n//       questionList = \"What is your experience?, Why do you want this job?\";\n//     }\n//     console.log(\"Constructed questionList:\", questionList);\n//     const dynamicSystemPrompt = `\n//             You are an AI voice assistant conducting interviews.\n//             Your job is to ask candidates provided interview questions, assess their responses.\n//             Begin the conversation with a friendly introduction, setting a relaxed yet professional tone. Example:\n//             \"Hey there! Welcome to your ${interviewInfo?.interviewData?.jobPosition} interview. Let’s get started with a few questions!\"\n//             Ask one question at a time and wait for the candidate’s response before proceeding. Keep the questions clear and concise. Below Are the questions ask one by one:\n//             Questions: ${questionList}\n//             Keep the conversation natural and engaging–use casual phrases like \"Alright, next up…\" or \"Let’s tackle a tricky one!\"\n//             After 5–7 questions, wrap up the interview smoothly by summarizing their performance. Example:\n//             \"That was great! You handled some tough questions well. Keep sharpening your skills!\"\n//             End on a positive note:\n//             \"Thanks for chatting! Hope to see you crushing projects soon!\"\n//             Key Guidelines:\n//             ✅ Be friendly, engaging, and witty\n//             ✅ Keep responses short and natural, like a real conversation\n//             ✅ Adapt based on the candidate’s confidence level\n//             ✅ Ensure the interview remains focused on React\n//         `.trim();\n//     const dynamicAssistant = {\n//       name: \"AI Interviewer\",\n//       model: {\n//         provider: \"openai\",\n//         model: \"gpt-4\",\n//         messages: [\n//           {\n//             role: \"system\",\n//             content: dynamicSystemPrompt,\n//           },\n//         ],\n//       },\n//       voice: {\n//         provider: \"playht\",\n//         voiceId: \"jennifer\",\n//       },\n//       transcriber: {\n//         provider: \"deepgram\",\n//         model: \"nova-2\",\n//         language: \"en-US\",\n//       },\n//       firstMessage: `Hi ${interviewInfo?.userName}, how are you? Ready for your interview on ${interviewInfo?.interviewData?.jobPosition}?`,\n//     };\n//     navigator.mediaDevices\n//       .getUserMedia({ audio: true })\n//       .then(() => {\n//         console.log(\"Microphone access granted\");\n//         try {\n//           vapiRef.current.start(dynamicAssistant);\n//           console.log(\"Call start attempted with dynamic assistant\");\n//         } catch (error) {\n//           console.error(\"Error starting call:\", error.message);\n//         }\n//       })\n//       .catch((err) => {\n//         console.error(\"Microphone access denied or error:\", err);\n//         alert(\"Please allow microphone access to start the interview.\");\n//       });\n//   };\n//   const endCall = () => {\n//     if (vapiRef.current && isCallActive) {\n//       console.log(\"Ending call...\");\n//       if (vapiRef.current.mute) {\n//         vapiRef.current.mute(true);\n//         console.log(\"Microphone muted\");\n//       }\n//       vapiRef.current.stop();\n//       vapiRef.current = null; // Forcefully nullify Vapi instance\n//       setIsCallActive(false);\n//       stopTimer();\n//       setTime(0);\n//       setInterviewInfo((prev) => ({\n//         ...prev,\n//         isInterviewActive: false,\n//       }));\n//       setIsAiSpeaking(false);\n//       setIsUserSpeaking(false);\n//       cleanupMedia(); // Stop microphone stream\n//       // Immediate redirect with a small delay for cleanup\n//       setTimeout(() => {\n//         router.push(\"/interview/\" + interviewInfo?.interviewId + \"/completed\");\n//         console.log(\"Redirected to /interview/completed\");\n//       }, 500); // 500ms delay to allow cleanup\n//     }\n//   };\n//   const toggleMic = () => {\n//     if (vapiRef.current && vapiRef.current.mute) {\n//       vapiRef.current.mute(!isMuted);\n//       setIsMuted((prev) => !prev);\n//       console.log(\"Mic toggled:\", !isMuted);\n//     }\n//   };\n//   const cleanupMedia = () => {\n//     if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n//       navigator.mediaDevices\n//         .getUserMedia({ audio: true })\n//         .then((stream) => {\n//           stream.getTracks().forEach((track) => track.stop());\n//           console.log(\"Microphone stream stopped\");\n//         })\n//         .catch((err) => console.error(\"Error stopping media stream:\", err));\n//     }\n//   };\n//   const userInitial = interviewInfo?.userName\n//     ? interviewInfo.userName[0].toUpperCase()\n//     : \"U\";\n//   return (\n//     // Set component to take full screen height and use flex column layout\n//     <div className=\"min-h-screen flex flex-col\"> \n//       <style>\n//         {`\n//                     @keyframes pulse {\n//                         0% { transform: scale(1); opacity: 0.6; }\n//                         50% { transform: scale(1.2); opacity: 0.3; }\n//                         100% { transform: scale(1); opacity: 0.6; }\n//                     }\n//                     .pulse-ring {\n//                         position: absolute;\n//                         inset: 0;\n//                         border-radius: 9999px;\n//                         border: 4px solid;\n//                         background: rgba(255, 255, 255, 0.2);\n//                         animation: pulse 1.5s ease-in-out infinite;\n//                     }\n//                 `}\n//       </style>\n//       {/* Main content div takes up remaining space and handles inner padding */}\n//       <div className=\"p-20 lg:px-48 xl:px-56 flex-grow\">\n//           <h2 className=\"font-semibold text-sm\">\n//             ({interviewInfo?.interviewData?.jobPosition || \"Loading...\"})\n//           </h2>\n//           <h2 className=\"font-bold text-xl flex items-center justify-between\">\n//             AI - Interview Session\n//             <span className=\"flex gap-2 items-center\">\n//               <Timer />\n//               {formatTime(time)}\n//             </span>\n//           </h2>\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 gap-7 mt-5\">\n//             <div className=\"bg-white h-[300px] rounded-lg border flex flex-col justify-center items-center relative\">\n//               <div className=\"relative\">\n//                 {isAiSpeaking && <span className=\"pulse-ring border-green-500\" />}\n//                 <Image\n//                   src=\"/ai.jpeg\"\n//                   alt=\"AI\"\n//                   width={100}\n//                   height={100}\n//                   className=\"w-[60px] h-[60px] rounded-full object-cover z-10 relative\"\n//                 />\n//               </div>\n//               <h2 className=\"text-sm font-semibold mt-2 z-10 relative\">\n//                 AI Interviewer\n//               </h2>\n//             </div>\n//             <div className=\"bg-white h-[300px] rounded-lg border flex flex-col justify-center items-center relative\">\n//               <div className=\"relative\">\n//                 {isUserSpeaking && <span className=\"pulse-ring border-blue-500\" />}\n//                 <h2 className=\"text-2xl bg-primary text-white p-3 rounded-full px-6 z-10 relative\">\n//                   {userInitial}\n//                 </h2>\n//               </div>\n//               <h2 className=\"text-sm mt-2 font-semibold z-10 relative\">\n//                 {interviewInfo?.userName || \"Guest\"}\n//               </h2>\n//             </div>\n//           </div>\n//           <div className=\"flex items-center justify-center gap-4 mt-7\">\n//             <Mic\n//               className={`w-12 h-12 rounded-full text-white p-3 cursor-pointer transition-colors ${\n//                 isMuted ? \"bg-gray-500\" : \"bg-green-500\"\n//               }`}\n//               onClick={toggleMic}\n//             />\n//             <Phone\n//               className=\"w-12 h-12 rounded-full bg-red-500 text-white p-3 cursor-pointer\"\n//               onClick={endCall}\n//             />\n//           </div>\n//           <h2 className=\"text-center text-sm text-gray-500 mt-4\">\n//             {isCallActive ? \"Interview in progress...\" : \"Starting interview...\"}\n//           </h2>\n//       </div>\n//       {/* Footer is correctly placed at the bottom of the component */}\n//       <Footer />\n//     </div>\n//   );\n// }\n// export default StartInterview;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/interview/[interview_Id]/start/page.jsx\n"));

/***/ })

});